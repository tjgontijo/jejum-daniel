datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}
generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  ACTIVE
  PENDING
  SUSPENDED
  BANNED
}


model User {
  id              String         @id @default(uuid())
  email           String         @unique
  firstName       String
  lastName        String
  emailVerified   DateTime?
  passwordHash    String?
  resetToken      String?        @unique
  resetTokenExpiry DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  accounts      Account[]
  sessions      Session[]
  tokens        Token[]
  modeules      Modules[]      @relation("UserModules")
  cycles        FastingCycle[]
  intentions    Intention[]
  communities   Community[]    @relation("CommunityMembers")
  posts         Post[]
  testimonies   Testimony[]
  status        UserStatus  @default(ACTIVE)
}

model Account {
  id                 String  @id @default(uuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?     
  token_type         String?  
  scope              String?  
  id_token           String?  
  session_state      String?  
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Token {
  id           String   @id @default(uuid())
  token        String   @unique
  type         String   // 'email_verification', 'password_reset', etc.
  expires      DateTime
  createdAt    DateTime @default(now())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires   DateTime

  @@unique([identifier, token])
}


model Modules {
  id        String     @id @default(uuid())
  name      String
  sku       String     @unique
  users     User[]     @relation("UserModules")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Intention {
  id        String    @id @default(uuid())
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id])
  userId    String
}

model FastingCycle {
  id                 String        @id @default(uuid())
  title              String
  description        String?
  startDate          DateTime
  endDate            DateTime?
  finalReflection    String?
  completionPercentage Float       @default(0)
  status             FastingStatus @default(ACTIVE)
  user               User          @relation(fields: [userId], references: [id])
  userId             String
  entries            CycleEntry[]
  testimonies        Testimony[]
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
}

enum FastingStatus {
  ACTIVE
  COMPLETED
  CANCELLED
}

model CycleEntry {
  id              String        @id @default(uuid())
  day             Int
  completed       Boolean       @default(false)
  difficultyLevel Int?
  difficultyNotes String?
  cycle           FastingCycle  @relation(fields: [cycleId], references: [id])
  cycleId         String
  answers         ReflectionAnswer[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model DevotionalDay {
  id                      Int                        @id @default(autoincrement())
  dayNumber               Int
  translations            DevotionalDayTranslation[]
  createdAt               DateTime                   @default(now())
  updatedAt               DateTime                   @updatedAt
}

model DevotionalDayTranslation {
  id             String         @id @default(uuid())
  language       String         // 'pt', 'en', 'es'
  devotionalDay  DevotionalDay  @relation(fields: [devotionalDayId], references: [id])
  devotionalDayId Int

  title           String
  bibleVerse      String
  prayerText      String
  meditationText  String
  reflectionText  String
  practicalTasks  String
  closingMessage  String
}

model ReflectionQuestion {
  id        String                   @id @default(uuid())
  day       Int
  translations ReflectionQuestionTranslation[]
  answers   ReflectionAnswer[]
  createdAt DateTime                 @default(now())
  updatedAt DateTime                 @updatedAt
}

model ReflectionQuestionTranslation {
  id          String                  @id @default(uuid())
  language    String
  text        String
  question    ReflectionQuestion      @relation(fields: [questionId], references: [id])
  questionId  String
}

model ReflectionAnswer {
  id          String             @id @default(uuid())
  answer      String
  entry       CycleEntry         @relation(fields: [entryId], references: [id])
  entryId     String
  question    ReflectionQuestion @relation(fields: [questionId], references: [id])
  questionId  String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model Testimony {
  id            String     @id @default(uuid())
  title         String
  textContent   String?
  audioUrl      String?
  videoUrl      String?
  isPublic      Boolean    @default(false)
  user          User       @relation(fields: [userId], references: [id])
  userId        String
  cycle         FastingCycle? @relation(fields: [cycleId], references: [id])
  cycleId       String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Community {
  id          String    @id @default(uuid())
  name        String
  description String?
  members     User[]    @relation("CommunityMembers")
  posts       Post[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Post {
  id          String    @id @default(uuid())
  content     String
  community   Community @relation(fields: [communityId], references: [id])
  communityId String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
